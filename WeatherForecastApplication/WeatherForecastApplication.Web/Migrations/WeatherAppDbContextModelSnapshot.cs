// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherForecastApplication.Data;

#nullable disable

namespace WeatherForecastApplication.Web.Migrations
{
    [DbContext(typeof(WeatherAppDbContext))]
    partial class WeatherAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.City", b =>
                {
                    b.Property<int>("City_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("City_Id"));

                    b.Property<string>("City_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("City_Id");

                    b.HasIndex("City_name")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.CitySite", b =>
                {
                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<int>("Site_Id")
                        .HasColumnType("int");

                    b.HasKey("City_Id", "Site_Id");

                    b.HasIndex("Site_Id");

                    b.ToTable("CitySites");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.ForecastSite", b =>
                {
                    b.Property<int>("Site_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Site_Id"));

                    b.Property<string>("Site_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Site_Id");

                    b.HasIndex("Site_name")
                        .IsUnique();

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.Notification", b =>
                {
                    b.Property<int>("Site_Id")
                        .HasColumnType("int");

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<int>("Timeslot_Id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateNotification")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("TimeNotification")
                        .HasColumnType("time");

                    b.HasKey("Site_Id", "City_Id", "Timeslot_Id");

                    b.HasIndex("City_Id", "Site_Id", "Timeslot_Id")
                        .IsUnique();

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.Prediction", b =>
                {
                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<int>("Site_Id")
                        .HasColumnType("int");

                    b.Property<int>("Timeslot_Id")
                        .HasColumnType("int");

                    b.Property<bool>("Danger")
                        .HasColumnType("bit");

                    b.Property<string>("Weather")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("City_Id", "Site_Id", "Timeslot_Id");

                    b.HasIndex("Timeslot_Id");

                    b.ToTable("Predictions");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.Rating", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<int>("Site_Id")
                        .HasColumnType("int");

                    b.Property<int>("Timeslot_Id")
                        .HasColumnType("int");

                    b.Property<int>("Rating_Value")
                        .HasColumnType("int");

                    b.HasKey("Email", "City_Id", "Site_Id", "Timeslot_Id");

                    b.HasIndex("City_Id", "Site_Id", "Timeslot_Id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.Timeslot", b =>
                {
                    b.Property<int>("Timeslot_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Timeslot_Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("Timeslot_Id");

                    b.HasIndex("Date", "Time")
                        .IsUnique();

                    b.ToTable("Timeslots");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Hashed_password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Email");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.UserNotification", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<int>("Site_Id")
                        .HasColumnType("int");

                    b.Property<int>("Timeslot_Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.HasKey("Email", "City_Id", "Site_Id", "Timeslot_Id");

                    b.HasIndex("Site_Id", "City_Id", "Timeslot_Id");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.UserSiteCity", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<int>("Site_Id")
                        .HasColumnType("int");

                    b.HasKey("Email", "City_Id", "Site_Id");

                    b.HasIndex("City_Id", "Site_Id");

                    b.ToTable("UserSiteCities");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.CitySite", b =>
                {
                    b.HasOne("WeatherForecastApplication.Web.Models.City", "City_")
                        .WithMany("CitySites")
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherForecastApplication.Web.Models.ForecastSite", "Site")
                        .WithMany("CitySites")
                        .HasForeignKey("Site_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City_");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.Notification", b =>
                {
                    b.HasOne("WeatherForecastApplication.Web.Models.Prediction", "Prediction_")
                        .WithOne("Notification_")
                        .HasForeignKey("WeatherForecastApplication.Web.Models.Notification", "City_Id", "Site_Id", "Timeslot_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prediction_");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.Prediction", b =>
                {
                    b.HasOne("WeatherForecastApplication.Web.Models.Timeslot", "Timeslot_")
                        .WithMany("Predictions")
                        .HasForeignKey("Timeslot_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherForecastApplication.Web.Models.CitySite", "CitySite_")
                        .WithMany("Predictions")
                        .HasForeignKey("City_Id", "Site_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CitySite_");

                    b.Navigation("Timeslot_");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.Rating", b =>
                {
                    b.HasOne("WeatherForecastApplication.Web.Models.User", "User_")
                        .WithMany("Ratings")
                        .HasForeignKey("Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherForecastApplication.Web.Models.Prediction", "Prediction_")
                        .WithMany("Ratings")
                        .HasForeignKey("City_Id", "Site_Id", "Timeslot_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prediction_");

                    b.Navigation("User_");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.UserNotification", b =>
                {
                    b.HasOne("WeatherForecastApplication.Web.Models.User", "User_")
                        .WithMany("UserNotification")
                        .HasForeignKey("Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherForecastApplication.Web.Models.Notification", "Notification_")
                        .WithMany("UserNotifications_")
                        .HasForeignKey("Site_Id", "City_Id", "Timeslot_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification_");

                    b.Navigation("User_");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.UserSiteCity", b =>
                {
                    b.HasOne("WeatherForecastApplication.Web.Models.User", "User_")
                        .WithMany("UserSiteCities")
                        .HasForeignKey("Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherForecastApplication.Web.Models.CitySite", "CitySite_")
                        .WithMany("UserSiteCities")
                        .HasForeignKey("City_Id", "Site_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CitySite_");

                    b.Navigation("User_");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.City", b =>
                {
                    b.Navigation("CitySites");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.CitySite", b =>
                {
                    b.Navigation("Predictions");

                    b.Navigation("UserSiteCities");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.ForecastSite", b =>
                {
                    b.Navigation("CitySites");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.Notification", b =>
                {
                    b.Navigation("UserNotifications_");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.Prediction", b =>
                {
                    b.Navigation("Notification_");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.Timeslot", b =>
                {
                    b.Navigation("Predictions");
                });

            modelBuilder.Entity("WeatherForecastApplication.Web.Models.User", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("UserNotification");

                    b.Navigation("UserSiteCities");
                });
#pragma warning restore 612, 618
        }
    }
}
